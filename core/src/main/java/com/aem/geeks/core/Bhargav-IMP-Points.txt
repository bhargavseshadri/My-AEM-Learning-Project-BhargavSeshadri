=============================================================================================
QUICK IMPORTANT NOTES

=============================================================================================
IMPORTANT PATHS
-> For Configurations(crx) : apps/system/config, (preferred path is /apps/my-prjt/osgiconfig/config)

=============================================================================================
2) Global Objects available in HTL (most common ones)

-> Enumerable Objects : These objects provides a "VALUEMAP" which contains the information, we can access that info.
- properties : Provides the component properties, like whatever we save through dialog, we can access those props without using sling model.
- pageProperties : This will provide you the properties or info of page where our component used, In simple words getting page informatuion
- inheritedPageProperties : It provide the inherited properties of page, we can access the properties of the parent page

-> Demo code available here: apps/aemgeeks/components/content/author-books/author-books.html

---------------------------------------
-> Java-Backed-Object
- Component : Provides the information of that component.
- componentContext : It is open for each conmponent, Independent of wcmmode.
- resource : object of current resource(when we drag and drop a comp on page, then the created node of that comp in that page is called as current Resource).
- resourcePage : On the page where we drag and drop the component, It provides the information of that page means the current page
- currentDesign : there is a design node available to store the template level properties, that info we can get through this. if nothing is set then it gives the default libs design node path
- currentNode : when we drag and drop a component on a page, then that comp node is treated as a current node.
- currentPage
- resourceDesign : it is the same as the current design
- wcmmode : It provide you the information, that in which mode you are, returns "boolean", for EDIT: isEdit method, for Preview: isPreview method.

-> Demo code available here: apps/aemgeeks/components/content/author-books/author-books.html

=============================================================================================
3) Utility Functions available in Sightly: in, format, join

=============================================================================================
4) pageManeger: using this we can get the page we want.
eg:
@ScriptVariable
PageManager pageManager;
Page page=pageManager.getPage("/content/aemgeeks/us/en");

=============================================================================================
5) @Component
--> Servlets : @Component(service = Servlet.class)
--> OSGI Configuration : @Component(service = OSGiConfig.class,immediate = true)
--> Schedulers
- Runnable : @Component(immediate = true, service = Runnable.class)
- Job :  @Component(immediate = true, service = Job.class)

--> Service : @Component(Service = bhargavService.class)

=============================================================================================
6) ANNOTATIONS:
@Activate : when we want something to load or activate at the time of this service initializations, there we use this

=============================================================================================
7) SERVLETS - GET and POST requests explanation

--> GET FLOW
a) Browser issues GET /path?query=abc HTTP/1.1 (headers, cookies).
b) Server/router receives request, Sling/Servlet container resolves resource/servlet.
c) Container calls doGet(req, res)
d) doGet reads req.getParameter(...), session, headers, etc., prepares content and sets response headers (Content-Type, caching),
writes body via res.getWriter() or stream.
e) Server sends HTTP status (200 OK) + body back.
f) Browser renders or caches per response headers.

--> POST FLOW
a) Browser issues POST /path HTTP/1.1 with body (form-encoded, JSON, multipart) + headers.
b) Transports to the server.
c) Container resolves servlet and calls doPost(req, res).
d) doPost reads req.getParameter() (for form), validates input, performs DB/JCR writes.
f) doPost typically returns: HttpStatus codes and then Client receives response and acts accordingly.

=============================================================================================
9) req.setAttribute() AND req.getAttribute()  Explanation with Example

Q) What is an “attribute” in a request?
Answer: You can store temporary data in the HttpServletRequest object using setAttribute() and later read it back using getAttribute().
--> Think of a HttpServletRequest (or SlingHttpServletRequest) object as a container or bag that travels from the browser → AEM → servlet → JSP → other servlets.
--> That bag can carry
a) Parameters (from the user input, like req.getParameter("name"))
b) Headers (like cookies, content-type)
c) And also... attributes that developers can manually add.

--> So attributes are temporary data stored inside the request object — for this single request only.
--> req.setAttribute("key", value);  => Adds a data item to the request.
--> req.getAttribute("key");  => Retrieves that data item later.

--> Example With code snippets: Imagine you’re processing a registration form.
Step 1: You receive a POST request.
String name = req.getParameter("name");
String email = req.getParameter("email");

- Now, before forwarding this to a JSP page or another servlet, you want to store these values inside the request temporarily

Step 2: Set attributes
req.setAttribute("userName", name);
req.setAttribute("userEmail", email);
- Now your req object carries these attributes.

Step 3: Forward the request
RequestDispatcher dispatcher = req.getRequestDispatcher("/thankyou.jsp");
dispatcher.forward(req, res);

- Then inside your JSP (HTL or JSP):
<p>Welcome ${requestScope.userName}! Your email is ${requestScope.userEmail}</p>  --> Output : Welcome Bhargav! Your email is bhargav@example.com

Final understanding: (temporary notepad that travels along with one request) Here with in the request, until the req is there at that time we are setting
these attr(variables) userName, userEmail with our data.

Note: We can forward this attributs from one servlet to another, like we can set these attributs in one servlet and then get these in another servlet
// Forward the request to another servlet
RequestDispatcher dispatcher = req.getRequestDispatcher("/second");
dispatcher.forward(req, res);

=============================================================================================
10) MULTIFIELD - COMPOSITE PROPERTY (composite="{Boolean}true")
- we will add this property while defining a multifield in content dialog, by default it is false
- FALSE : In this case, if we give two set of values to the multified in the comp dialog, then it store those two sets values in a "STRING ARRAY" inside component node.
- TRUE : In this case if we provide a two sets of values to the multified in the comp dialog, it will create a node under our component node(with name we have give
          for multified in xml) and then under that node it will create a two item nodes for those two sets of values.
- we use false when we have a single field in the multifield, and true when we have a multiple fields in the multifield.