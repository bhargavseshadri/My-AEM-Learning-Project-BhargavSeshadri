Bhargav Personal Component : apps/aemgeeks/components/content/slingmodelproductcomp

My Components:
a) Personal Component : apps/aemgeeks/components/content/slingmodelproductcomp
b) API Component : apps/aemgeeks/components/content/bhargavapicomp
c) Registration Form Comp (for ResourceType Post Servlet) : apps/aemgeeks/components/content/registrationformservlet
d) Registration Form Comp (for PathType Post Servlet) : apps/aemgeeks/components/content/formforpathtypeservlet

=============================================================================================
1) Resource Resolver related Notes is in
- Main: com/aem/geeks/core/utils/ResolverUtil.java
- Eg: com/aem/geeks/core/services/impl/ComponentsInfoServiceImpl.java


-> Info required for this :
- In Bundles my core bundle name is--> aemgeeks.core

=============================================================================================
2) FETCHING DATA FROM EXTERNAL API - NO ACCESS TOKEN NEEDED - (using sling model)

a) Directly fetching the data from the endpoint with no credentials and token:
STEP:1(just Interface) : com/aem/geeks/core/models/ExternalAPIDemoModel.java
STEP:2(sling model implimentation) :(MAIN) FETCHING DATA from API logic: com/aem/geeks/core/models/impl/apirelated/ExternalAPIDemoModelImpl.java
HELPER POJO CLASS: com/aem/geeks/core/models/impl/apirelated/ExternalData.java
STEP:3 : RENDERING THE DATA ON FRONTEND: apps/aemgeeks/components/content/bhargavapicomp/bhargavapicomp.html

-------------------------------------------------
b) FETCHING THE DATA FROM THIRD PARTY ENDPOINT WHICH NEED A ACCESS TOKEN - ACCESS TOKEN NEEDED - (using Service)

STEP:A check if that purticular API is working or not and that user creds are working or not using powershell by running the below commands

* Step 1: Login and get token
$response = curl -Method POST "https://dummyjson.com/auth/login" `
  -Headers @{ "Content-Type" = "application/json" } `
  -Body '{"username":"emilys","password":"emilyspass"}' | ConvertFrom-Json

* Step 2: Call protected API using token
curl -Uri "https://dummyjson.com/auth/me" `
  -Headers @{ "Authorization" = "Bearer $($response.accessToken)" } |
  ConvertFrom-Json

- using the token we will get all the info about that user.
* If we get the response with no issues then the API is working fine, and now we will do the same thing will get the response from API using AEM.

******************
IMP Info:
a) for getting token : https://dummyjson.com/auth/login
                       Creds we use : username : emilys, password : emilyspass

b) Using the token we hit this API to get the response : https://dummyjson.com/auth/me
******************
STEP: B - Get the response from API using AEM.

* Use case : Here using "OSGI CONFIG" we take the Required API details, and then in "OSGI Service" we get the token with creds and then using that token we
             get the json data of the user and after getting the json we pu that in a MapperObject as a String, and this service return the MapperObject.
             Now in "Sling model" we get the MapperObject and store the response fields in a Variables. Then in HTL we get the data using Sling model getters
             and render that data on page as a card.

STEP: 1 : Create OSGi configuration, so we can give the username/password/endpoints in the configuration.
         com/aem/geeks/core/config/BhargavConfigForUserAPI.java

STEP: 2 : MAIN LOGIC - Creating a OSGI Service to use the above config values to login → get token → call protected API -> and getting the response
          com/aem/geeks/core/services/impl/UserAPIServiceImpl.java

STEP: 3 : Creating  a Sling Model So using that we can render the API info on page
          com/aem/geeks/core/models/impl/apirelated/UserAPISlingModelImpl.java

STEP: 4 (Last Step) : By using a HTL in component, we render the data we got from the api
          apps/aemgeeks/components/content/bhargavapicomp/bhargavapicomp.html

- To see the output
1 - Go to Configurations and give the values in "Bhargav - USER API OGSI Config"
        > loginUrl = https://dummyjson.com/auth/login
        > protectedUserUrl = https://dummyjson.com/auth/me
        > Username = emilys
        > Password = emilyspass
        > Note : got the user creds and data from : https://dummyjson.com/users

2 - Drag the component apps/aemgeeks/components/content/bhargavapicomp on the page, you will see the data getting fetched in a card
    with firtname, lastname, dob, etc from API.


=============================================================================================
3) SERVLET

a) ResourceType Servlet:
* MY EXAMPLE
-> GET : (only step) (MAIN LOGIC): com/aem/geeks/core/servlets/BhargavResourceTypeGETServlet.java

-> POST:
Servlet Usage: Here this Servlet will work for a REGISTRATION FORM component, there when a user adds his details in the form and submits it then this post servlet
               gets called and then it will create a new node(usernode) under the provided "page resource", and in that node it will store the user given data

Step: 1 - apps/aemgeeks/components/content/registrationformservlet/registrationformservlet.html
- you should have a component or some resource, so here we have a form and when ever we give the value and hit the submit button the post servlet
will execute and posts the data to our JCR, (optional part)GET method will give the response after that.

Step: 2 -(MAIN LOGIC) ResourceType Post Servlet : com/aem/geeks/core/servlets/BhargavResourceTypePostServlet.java
Step: 3(last step) : Go to the component and check in the form, if it has the "method" & "action" attributes correctly set, if not set them
<form method="post"  action="current page jcr:content path with selectors">


* AEM GEEKS EXAMPLE
-> GET, POST : com/aem/geeks/core/servlets/GeeksResourceTypesServlet.java

-----------------------------
b) PathType Servlet: com/aem/geeks/core/servlets/GeeksPathTypeServlet.java

Servlet Usage: here we are writing a path bound servlet, which is bound to paths ""/bin/pages","/geeks/pages" with get and post methods
               * in GET method we will create a json with all the pages where KEY will be the page title amd VALUE will be the page path
               * in POST method we will submit the form data to this servlet and later on print that data in logs

Step:1 - Defining a Servlet :(MAIN LOGIC) com/aem/geeks/core/servlets/GeeksPathTypeServlet.java
Step:2 (last step for GET method) - Calling the servlet
a) Hit this path (because we have bound our servlet to /bin/pages): http://localhost:4502/bin/pages
b) If you get the forbidden error then your path is missing in the servlet execution paths, add you path in those execution paths.
* ->ADDING OUR PATH TO THE EXECUTION PATHS:
* 1) go to system/console/configmgr
* 2) search for "Apache Sling Servlet/Script resolver and Error Handler"
* 3) there add your path in the execution paths; eg : /geeks/  - then save it.
* 4) now hit the path you will get the result : http://localhost:4502/geeks/pages/

Step:3 (Only for POST METHOD) : apps/aemgeeks/components/content/formforpathtypeservlet/formforpathtypeservlet.html
* Go to the form component and there add you path (eg: /bin/pages) in the form "action" attribute and for the "method" attribute give post.

-------------------------------------------------------------------------
4) QUERY PARAMETERS FETCHING USING PATH TYPE SERVLET DEMO

Servlet usage: this servlet will get executed when we hit the path /bin/queryparamdemo and then in response it will give the info present in the query params.
Step: (only step) : com/aem/geeks/core/servlets/BhargavPathTypeServletQP.java

To execute the servlet : http://localhost:4502/bin/queryparamdemo?name=Bhargav&age=25

=============================================================================================
5) JSON DEMOs

a) Creating a json with all the pages where KEY will be the page title amd VALUE will be the page path.
Demo file : com/aem/geeks/core/servlets/GeeksPathTypeServlet.java

=============================================================================================
6) SLING MODELS & SERVICES

Step:1 - create a component : apps/aemgeeks/components/content/slingmodelproductcomp
Step:2 - create a Sling Model : com/aem/geeks/core/models/ProductModel.java
Step:3 - create a Sling Model Implimentation : com/aem/geeks/core/models/impl/ProductModelImpl.java

* Linking it with a SERVICE - com/aem/geeks/core/services/impl/ProductServiceImpl.java
* Linking the Service to an another Service : com/aem/geeks/core/services/ProductPriceBranchService.java

Step:4 - Using the Services In our Sling Model : com/aem/geeks/core/models/impl/ProductModelImpl.java
Step:5 - Rendering the Values in HTL Script : apps/aemgeeks/components/content/slingmodelproductcomp/slingmodelproductcomp.html

--------------------------------------------
Multiple Service Implimentations Linked to one Service Interface

Main Service interface: com/aem/geeks/core/services/DemoProductService.java

->Implimentations of this one interface service
a) com/aem/geeks/core/services/impl/DemoProductModelServiceOneImpl.java
b) com/aem/geeks/core/services/impl/DemoProductModelServiceTwoImpl.java

PROBLEM:  So for this one SERVICE there is two implimentations, so in this scenario, which service have to executed?

-> In this case we have two options
1) @ServiceRanking(1000) : class level annotation so according to this, which service have the higher service rank; then that service gets executed.
2) @OSGiService(filter="(component.name=__________)") : the other option is using "filter" in sling model, so based on which
                                                        service name we have given to the filter that service gets executed for that sling model.
                                                        Note: for this we have to give a name to the service in @Component.

- Filter demo & using of these services: com/aem/geeks/core/models/impl/ProductModelImpl.java

--------------------------------------------
COMPOSITE MULTIFIELD - SLING MODEL

Step:1 : Create a component with composite multifield -> apps/aemgeeks/components/content/slingmodelproductcomp/_cq_dialog/.content.xml

-> We can render the multifield values using two ways one is using MAP and the other way is using JAVA BEAN
a) USING MAP
Step:2 : Write the logic in Sling Model to render those item nodes of that comp multifield  -> com/aem/geeks/core/models/impl/ProductModelImpl.java
Step:3(last step) : in htl I am printing those values -> apps/aemgeeks/components/content/slingmodelproductcomp/slingmodelproductcomp.html

=============================================================================================
7) CONFIGURATIONS

a) Normal Configuration
STEP:1 - com/aem/geeks/core/config/BhargavOSGiConfig.java -- Create an annotation class with osgi config code stating what are the values our configuration should take
STEP:2 - Create a Service interface -- com/aem/geeks/core/services/BhargavOsgiConfigService.java
STEP:3 - Create a service implimentation and link it with our osgi config, and then write the java logic based on need
         - com/aem/geeks/core/services/impl/BhargavOsgiConfigServiceImpl.java
STEP:4 - Using/calling this service in SLING MODEL -- com/aem/geeks/core/models/impl/ProductModelImpl.java
STEP:5(last step) - Printing the data on page using HTL -- apps/aemgeeks/components/content/slingmodelproductcomp/slingmodelproductcomp.html
-> To see the output : Goto system/console/configmgr  -> search for your configuration -> give the values and save -> drag and drop the component in which you have
                    printing those values for this it is "slingmodelproductcomp"


**NOTE: Converting an OSGI Configuration config file to NODE in CRXDE (For this demo too we are using the above BhargavOsgiConfigServiceImp)
Prerequisite - Delete your config file which is either under /apps/system/config or /apps/your-project/config.author
Step:1 - Go to crxde path /apps/your-project/config.author and right click - CREATE
Step:2 - and give type : sling:OsgiConfig and name : com.aem.geeks.core.services.impl.BhargavOsgiConfigServiceImp (you can get this name from your configuration box)
Step:3 - Click OK
Step:4 - Now for the node add the properties of your config fields (these also you can get from your config box) and save

--------------------------------------------
b) Factory Configuration

STEP:1 - com/aem/geeks/core/config/GeeksOSGiFactoryConfig.java - Create an annotation class with osgi config code stating what are the values our configuration should take
STEP:2 -(MAIN Logic) com/aem/geeks/core/services/impl/OSGiFactoryConfigImpl.java - Creating a Service with all the logic
STEP:3 - com/aem/geeks/core/models/impl/ProductModelImpl.java   - using the service in a sling model
STEP:4 - (Last Step) - apps/aemgeeks/components/content/slingmodelproductcomp/slingmodelproductcomp.html - printing the values in htl

==> To see the output
- Go to your configuration in system/console/configmgr and give the value and save
- Now on the page, drag and drop the COMPONENT,  where you have called your sling model (here we used in apps/aemgeeks/components/content/slingmodelproductcomp/slingmodelproductcomp.html).
- Now you can see the values of the multiple config instances.

=============================================================================================
8) SCHEDULERS
a) Runnable scheduler
STEP:1 - Create a Runnable Scheduler : com/aem/geeks/core/schedulers/GeeksScheduler.java
STEP:2 - Create a OSGI Configuration to take the values for scheduler : com/aem/geeks/core/config/SchedulerConfiguration.java
STEP:3(LAST STEP) - Connect and Use that configuration values in the scheduler : com/aem/geeks/core/schedulers/GeeksScheduler.java

--------------------------------------------
b) Job Scheduler
STEP:1 - Create a JOB Scheduler : com/aem/geeks/core/schedulers/GeeksSchedulerJobs.java
STEP:2 - Create a OSGI Configuration to take the values for scheduler : com/aem/geeks/core/config/SchedulerConfiguration.java
STEP:3(LAST STEP) - Connect and Use that configuration values in the scheduler : com/aem/geeks/core/schedulers/GeeksSchedulerJobs.java

=============================================================================================
8) WORKFLOWS in AEM

* TRIGGERING THE WORKFLOW USING LAUNCHER
- USE CASE: we will create a model which will create the page versions, when the WF executes.
a) Creating a WF Model (No Code) IN AEM - /conf/global/settings/workflow/models/bhargav-personal-workflow.html
1) Go to WF models console -> Create -> Give Title -> Done = Dummy Model is created in two places a) Design(/conf/global/settings/workflow/models), b)Runtime(/var/workflow/models)
2) Adding the Steps : Go to your Model and delete any steps avaliable -> Now add the create version step from OOTB available steps -> and give that step a name and description. -> SYNC - That's it

b) Creating a Launcher(No Code) : We create the laucher on the basis, as soon as my page is modified then that launcher should trigger the WF and then it should create a page version.
1) go to tools -> Workflows -> Launchers -> Create -> Give the required fields like when it  should trigger(Node Created or Node Modified or Node Removed), and link it to the WF you want
   (here we give NODE MODIFY, Our page path, type: CQ:PAGE, and Bhargav-Personal-Workflow)-> Then Activate the toggle button and then click Create. - Thats IT.
-> Now go and modify your page.

-------------------------------------------------------------
* TRIGGERING THE WORKFLOW USING CODE/API in Backend
NOTE: Incase of triggering WF using code, then in that case to give which "WF MODEL" to execute  and on which "PAYLOAD", we will use "WorkflowSession".

-> Here we are triggering the WF using code in Servlet
* SERVLET WORK: here whenever we hit the servlet path by providing the qurey parameter(here we give our pagepath as a query param) then the servlet executes and then
                trigger the Workflow we have given.

STEP: 1 (Only Step)- com/aem/geeks/core/servlets/ExecuteWorkflow.java
* TO TRIGGER THE SERVLET -> http://localhost:4502/bin/executeworkflow?page=/content/aemgeeks/us/en/bhargavseshadritestpage
- Then this servlet gets triggerrd and then it will go and trigger our WF.

-------------------------------------------------------------
* Writing Custom Workflow Process
- When no existing process is available based on our requirement then we can write our own custon WF process.
- This "CUSTOM WF PROCESS" is available in the dropdown Of PROCESS STEP.

- WORK OF THIS "CUSTOM WF PROCESS" : We will provide some DATA in the "arguments" in the process step dialog box, and then we add that data we have given,
                                     in the jcr:properties of that payload or page.
STEP: 1 - com/aem/geeks/core/workflows/GeeksWorkflowProcess.java
STEP: 2 - in our WF model drag and drop the "Process Step" -> and in that dialog box dropdown, you can see our new CUSTOM WF Process with labe we given. select that.
STEP: 3 -(specific to here use case) : give some info in arguments in process step dialog box. eg: approver:bhargav.
STEP: 4 - Now trigger the WF by providing the page path, after wf gets completed you can see the process step arguments data we given
          got added in the page jcr:content node as a properties.

-------------------------------------------------------------
* CUSTOM WORKFLOW STEP
- Combination of Custom WF Process + Component(this comp wont have any rendering script and backend module) is called a Custom Workflow STEP.
-IMP- The comp will have a cq:dialg, cq:editConfig. and  cq:editConfig has a child node called cq:formParameters and in that there is a property called "PROCESS"
      , for that property we give the value of our custom wf process, so in this way using that property we link this comp to our custom wf process.

STEP: 1 - Creating a custom WF Process for Custom Workflow STEP - com/aem/geeks/core/workflows/GeeksWorkflowStep.java
STEP: 2 - Creating a Component - apps/aemgeeks/components/workflow/geeksworkflowstep
Step: 3 - Add you step in the WF Model.


* NOTE:  If you didn't find your step in the available steps, this means our Comp group is not allowed. so add your comp group in design node.
- So open the properties in that WF Model console. and go to advanced tab and copy the default design node.
- In crx go to our design node "/libs/settings/wcm/designs/default" and then inside go to /jcr:content/model/flow and in the "components" check of your component
   group is present or not.
- If not present then we have to add our component group. but modifying /libs/ path is not at all advisable. so we have to overlay (or) the override the that libs design node.

* OVERLAYING (or) OVERRIDING THE LIBS NODE (doing in crx, but we can do through code also by pkging it out and putting in our code folder and giving a push)
STEP: 1 - Copy the design node "/libs/settings/wcm/designs/default"
STEP: 2 - Go to "apps/settings/wcm/designs" node and paste it there and rename the node from default to whatever you want.
STEP: 3 - Remove all the other nodes and folder, which we dont use. and keep /jcr:content/model
STEP: 4 - Do the modifications needed.

- Following steps are only specific to this use case.
STEP: 7 - Here in this use case add the component group in component property inside /jcr:content/model/flow node.
STEP: 6 - Now in the WF Model console -> in properties -> in advanced tab -> give our own overridden design node "/apps/settings/wcm/designs/geeks"
STEP: 7 - Now you can see your WF Step in the available steps. Drag and drop it.

=============================================================================================



















=============================================================================================
10) HTL
a)data-sly-list:  LOOPING
-> apps/aemgeeks/components/content/author-books/author-books.html
-> Its model is in : com/aem/geeks/core/models/impl/AuthorBooksImpl.java

b)data-sly-repeat: everything is exactly similar to data-sly-list but only difference is in page html structure list-have only one parent container and inside it it have <p> tags,
but Repeat creates div containers for every iteration

-> data-sly-list with ITERATOR :
eg scenario: want to iterate the child pages of a purticular page and then display that info to htl
- so in our sling model we gonna get all the child pages using "Iterator<Page> pages=page.listChildren();" and then we get the iterator.
- Now we gonna use this data-sly-list in the htl
- STEP:1 -> com/aem/geeks/core/services/impl/DemoServiceAImpl.java  (here we get the list of page objs and puts them in iterator)
- STEP:2 -> apps/aemgeeks/components/content/servicedemo/servicedemo.html (here we use data-sly-list)

-> Note: approach without using iterator is at (Useful to understand the use of ARRAYLIST, ITERATOR)
step:1 -> com/aem/geeks/core/services/impl/DemoServiceBImpl.java
step:2 -> apps/aemgeeks/components/content/servicedemo/servicedemo.html

--------------------
-> We use the below three combined
c)data-sly-template(STEP: 1): for creating template (to reuse the code) :FILE: apps/aemgeeks/components/structure/home/head.html
d)data-sly-use (STEP: 2): here we use this to get that file where the template is defined. :File: apps/aemgeeks/components/structure/home/home.html
e)data-sly-call(STEP: 3) : use to call the specific template written in that file  :File: apps/aemgeeks/components/structure/home/home.html

--------------------
f)data-sly-attribute : used to give attributes like class,id in html structure

--------------------
g)data-sly-include : used to include files, if we want to include any file like html,jsp we use this.
-> Example and notes for this is at : apps/aemgeeks/components/content/author-books/author-books.html
-> Note: If the path you include is not a valid one, then in that case it won't render anything.
-> Note: the file code will completely replace the code or div tag or markup in the main file.

--------------------
h)data-sly-resource : used to include resources.
-> Example and notes for this is at : apps/aemgeeks/components/content/author-books/author-books.html
-> Whatever the OUTPUT of the resource will be available in the place where we added this.
-> Note: The OUTPUT of the resource we have given will be displayed to the user

--------------------
i)data-sly-set : setting a variable in HTL, If you want a variable that should be available through out the HTL file then we use this

=================================
=> USING GLOBAL OBJECTS
> Enumerable Objects
1) properties - apps/aemgeeks/components/content/author-books/author-books.html
2) pageProperties - apps/aemgeeks/components/content/author-books/author-books.html
3) inheritedPageProperties - apps/aemgeeks/components/content/author-books/author-books.html

> Java-Backed-Object
4) Component : apps/aemgeeks/components/content/author-books/author-books.html
5) componentContext : apps/aemgeeks/components/content/author-books/author-books.html
6) resource : apps/aemgeeks/components/content/author-books/author-books.html
7) resourcePage : apps/aemgeeks/components/content/author-books/author-books.html
8) currentDesign : apps/aemgeeks/components/content/author-books/author-books.html
9) currentNode : apps/aemgeeks/components/content/author-books/author-books.html
10) currentPage : apps/aemgeeks/components/content/author-books/author-books.html
11) resourceDesign : apps/aemgeeks/components/content/author-books/author-books.html
12) wcmmode : apps/aemgeeks/components/content/author-books/author-books.html